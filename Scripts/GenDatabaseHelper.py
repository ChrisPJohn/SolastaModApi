import os
import re
class Asset:
    def __init__(self, name, asset_type, database_type, guid):
        self.name = name        
        self.asset_type = asset_type
        self.database_type = database_type
        self.guid = guid
    def member_name(self):
        result = self.name
        result = result.replace("+", "Plus")
        result = result.replace("-", "_")
        result = result.replace(" ", "_")
        result = result.replace(".", "_")
        if re.match(r"\d", result):
            result = f"_{result}"
        return result

script_dir = os.path.dirname(os.path.realpath(__file__))
solution_dir = os.path.dirname(script_dir)

def read_assets():
    result = {}
    asset_path = os.path.join(script_dir, "Assets.txt")
    with open(asset_path, "r", encoding="utf8") as file:
        next(file)
        for line in file:
            items = line.strip('\n\r').split("\t")
            asset = Asset(*items)
            if asset.asset_type in result:
                result[asset.asset_type].append(asset)
            else:
                result[asset.asset_type] = [asset]
    return result
            
def write_line(file, text, indent_count = 0):
    file.write(' ' * indent_count * 4)
    file.write(text)
    file.write("\n")
def write_helper(file):
    assets = read_assets()
    write_line(file, "// This file is automatically generated")
    write_line(file, "")
    write_line(file, "namespace SolastaModApi", 0)
    write_line(file, "{", 0)
    indent = 1
    write_line(file, "public static class DatabaseHelper", indent)
    write_line(file, "{", indent)
    for key in assets:
        subclass = key.split(".")[-1]
        subclass = f"{subclass}s"
        write_subclass(file, subclass, assets[key], indent + 1)
    write_line(file, "}", indent)
    write_line(file, "}", 0)
def write_subclass(file, name, asset_list, indent = 0):
    write_line(file, f"public static class {name}", indent)
    write_line(file, "{", indent)
    for asset in asset_list:
        write_getter(file, asset, indent + 1)
    write_line(file, "}", indent)
def write_getter(file, asset, indent = 0):
    member_name = asset.member_name()
    if asset.database_type == asset.asset_type:
        write_line(file, f"public static {asset.asset_type} {member_name} => DatabaseRepository.GetDatabase<{asset.database_type}>().TryGetElement(\"{asset.name}\", \"{asset.guid}\");", indent)
def gen_test_script():
    path = os.path.join(solution_dir, "SolastaModApi", "DatabaseHelper", "DatabaseHelper.cs")
    with open(path, "w", encoding="utf8") as file:
        write_helper(file)

def main():
    gen_test_script()
if __name__ == "__main__":
    main()